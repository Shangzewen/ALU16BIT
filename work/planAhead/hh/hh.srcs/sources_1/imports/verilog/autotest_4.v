/*
   This file was generated automatically by the Mojo IDE version B1.3.6.
   Do not edit this file directly. Instead edit the original Lucid source.
   This is a temporary file and any changes made to it will be destroyed.
*/

module autotest_4 (
    input clk,
    input rst,
    input mode_switch,
    output reg [23:0] leds,
    output reg [15:0] debug
  );
  
  
  
  localparam CLKSPEED = 5'h1a;
  
  wire [16-1:0] M_alu_out;
  wire [1-1:0] M_alu_z;
  wire [1-1:0] M_alu_v;
  wire [1-1:0] M_alu_n;
  reg [6-1:0] M_alu_alufn;
  reg [16-1:0] M_alu_a;
  reg [16-1:0] M_alu_b;
  alu16bit_2 alu (
    .alufn(M_alu_alufn),
    .a(M_alu_a),
    .b(M_alu_b),
    .out(M_alu_out),
    .z(M_alu_z),
    .v(M_alu_v),
    .n(M_alu_n)
  );
  
  wire [1-1:0] M_testButton_out;
  edge_detector_9 testButton (
    .clk(clk),
    .in(mode_switch),
    .out(M_testButton_out)
  );
  
  localparam START_state = 4'd0;
  localparam ADD_state = 4'd1;
  localparam ADD_OVERFLOW_state = 4'd2;
  localparam SUB_state = 4'd3;
  localparam SUB_OVERFLOW_state = 4'd4;
  localparam AND_state = 4'd5;
  localparam OR_state = 4'd6;
  localparam XOR_state = 4'd7;
  localparam A_state = 4'd8;
  localparam SHL_state = 4'd9;
  localparam SHR_state = 4'd10;
  localparam SRA_state = 4'd11;
  localparam PASS_state = 4'd12;
  localparam FAIL_state = 4'd13;
  
  reg [3:0] M_state_d, M_state_q = START_state;
  reg [25:0] M_counter_d, M_counter_q = 1'h0;
  reg [23:0] M_led_d, M_led_q = 1'h0;
  
  localparam NADD = 6'h00;
  
  localparam NSUB = 6'h01;
  
  localparam NAND = 6'h18;
  
  localparam NOR = 6'h1e;
  
  localparam NXOR = 6'h16;
  
  localparam NA = 6'h1a;
  
  localparam NSHL = 6'h20;
  
  localparam NSHR = 6'h21;
  
  localparam NSRA = 6'h23;
  
  localparam NUM1 = 16'h0003;
  
  localparam NUM2 = 16'h0004;
  
  always @* begin
    M_state_d = M_state_q;
    M_led_d = M_led_q;
    M_counter_d = M_counter_q;
    
    M_counter_d = M_counter_q + 1'h1;
    leds = M_led_q;
    leds[16+7+0-:1] = 1'h1;
    debug = 1'h0;
    M_alu_a = 16'h0000;
    M_alu_b = 16'h0000;
    M_alu_alufn = 16'h0000;
    
    case (M_state_q)
      START_state: begin
        M_alu_alufn = 16'h0000;
        M_alu_a = 16'h0000;
        M_alu_b = 16'h0000;
        debug = 6'h03;
        if (M_counter_q[25+0-:1]) begin
          M_state_d = ADD_state;
        end
      end
      ADD_state: begin
        M_alu_alufn = 6'h00;
        M_alu_a = 16'h0003;
        M_alu_b = 16'h0004;
        if (M_alu_out == 16'h0007) begin
          M_led_d[0+0+0-:1] = 1'h1;
        end
        if (M_counter_q[25+0-:1] && M_alu_out == 16'h0007) begin
          M_state_d = ADD_OVERFLOW_state;
        end
      end
      ADD_OVERFLOW_state: begin
        M_alu_alufn = 6'h00;
        M_alu_a = 16'h8000;
        M_alu_b = 16'h8000;
        if (M_alu_v == 1'h1) begin
          M_led_d[0+1+0-:1] = 1'h1;
        end
        if (M_counter_q[25+0-:1] && M_alu_v == 1'h1) begin
          M_state_d = SUB_state;
        end
      end
      SUB_state: begin
        M_alu_alufn = 6'h01;
        M_alu_a = 16'h0004;
        M_alu_b = 16'h0003;
        if (M_alu_out == 16'h0001) begin
          M_led_d[0+2+0-:1] = 1'h1;
        end
        if (M_counter_q[25+0-:1] && M_alu_out == 16'h0001) begin
          M_state_d = SUB_OVERFLOW_state;
        end
      end
      SUB_OVERFLOW_state: begin
        M_alu_alufn = 6'h01;
        M_alu_a = 16'h8000;
        M_alu_b = 16'h7fff;
        debug = M_alu_out[8+7-:8];
        if (M_alu_v == 1'h1) begin
          M_led_d[0+3+0-:1] = 1'h1;
        end
        if (M_counter_q[25+0-:1] && M_alu_v == 1'h1) begin
          M_state_d = AND_state;
          M_led_d[0+3+0-:1] = 1'h1;
        end
      end
      AND_state: begin
        M_alu_alufn = 6'h18;
        M_alu_a = 16'h0001;
        M_alu_b = 16'h0001;
        if (M_alu_out == 16'h0001) begin
          M_led_d[0+4+0-:1] = 1'h1;
        end
        if (M_counter_q[25+0-:1] && M_alu_out == 16'h0001) begin
          M_state_d = OR_state;
        end
      end
      OR_state: begin
        M_alu_alufn = 6'h1e;
        M_alu_a = 16'h000a;
        M_alu_b = 16'h000f;
        if (M_alu_out == 16'h000f) begin
          M_led_d[0+5+0-:1] = 1'h1;
        end
        if (M_counter_q[25+0-:1] && M_alu_out == 16'h000f) begin
          M_state_d = XOR_state;
        end
      end
      XOR_state: begin
        M_alu_alufn = 6'h16;
        M_alu_a = 16'h000a;
        M_alu_b = 16'h000c;
        if (M_alu_out == 16'h0006) begin
          M_led_d[0+6+0-:1] = 1'h1;
        end
        if (M_counter_q[25+0-:1] && M_alu_out == 16'h0006) begin
          M_state_d = A_state;
        end
      end
      A_state: begin
        M_alu_alufn = 6'h1a;
        M_alu_a = 16'h0003;
        M_alu_b = 16'h0004;
        if (M_alu_out == 16'h0003) begin
          M_led_d[0+7+0-:1] = 1'h1;
        end
        if (M_counter_q[25+0-:1] && M_alu_out == 16'h0003) begin
          M_state_d = SHL_state;
        end
      end
      SHL_state: begin
        M_alu_alufn = 6'h20;
        M_alu_a = 16'h000a;
        M_alu_b = 16'h0003;
        if (M_alu_out == 16'h0050) begin
          M_led_d[8+0+0-:1] = 1'h1;
        end
        if (M_counter_q[25+0-:1] && M_alu_out == 16'h0050) begin
          M_state_d = SHR_state;
        end
      end
      SHR_state: begin
        M_alu_alufn = 6'h21;
        M_alu_a = 16'h0050;
        M_alu_b = 16'h0003;
        if (M_alu_out == 16'h000a) begin
          M_led_d[8+1+0-:1] = 1'h1;
        end
        if (M_counter_q[25+0-:1] && M_alu_out == 16'h000a) begin
          M_state_d = SRA_state;
        end
      end
      SRA_state: begin
        M_alu_alufn = 6'h23;
        M_alu_a = 16'hc000;
        M_alu_b = 16'h0003;
        if (M_alu_out == 16'hf800) begin
          M_led_d[8+2+0-:1] = 1'h1;
        end
        if (M_counter_q[25+0-:1] && M_alu_out == 16'hf800) begin
          M_state_d = PASS_state;
        end
      end
      PASS_state: begin
        M_alu_a = 16'h0000;
        M_alu_b = 16'h0000;
        M_alu_alufn = 16'h0000;
        M_led_d[16+7-:8] = 8'h01;
      end
    endcase
    if (M_counter_q[25+0-:1] == 1'h1) begin
      M_counter_d[25+0-:1] = 1'h0;
    end
  end
  
  always @(posedge clk) begin
    if (rst == 1'b1) begin
      M_counter_q <= 1'h0;
      M_led_q <= 1'h0;
      M_state_q <= 1'h0;
    end else begin
      M_counter_q <= M_counter_d;
      M_led_q <= M_led_d;
      M_state_q <= M_state_d;
    end
  end
  
endmodule
