/*
   This file was generated automatically by the Mojo IDE version B1.3.6.
   Do not edit this file directly. Instead edit the original Lucid source.
   This is a temporary file and any changes made to it will be destroyed.
*/

module alu16bit_2 (
    input [5:0] alufn,
    input [15:0] a,
    input [15:0] b,
    output reg [15:0] out,
    output reg z,
    output reg v,
    output reg n
  );
  
  
  
  wire [16-1:0] M_add_s;
  wire [1-1:0] M_add_z;
  wire [1-1:0] M_add_v;
  wire [1-1:0] M_add_n;
  reg [16-1:0] M_add_a;
  reg [16-1:0] M_add_b;
  reg [6-1:0] M_add_alufn;
  adder_5 add (
    .a(M_add_a),
    .b(M_add_b),
    .alufn(M_add_alufn),
    .s(M_add_s),
    .z(M_add_z),
    .v(M_add_v),
    .n(M_add_n)
  );
  
  wire [16-1:0] M_bool_bool;
  reg [6-1:0] M_bool_alufn;
  reg [16-1:0] M_bool_a;
  reg [16-1:0] M_bool_b;
  boolean_6 bool (
    .alufn(M_bool_alufn),
    .a(M_bool_a),
    .b(M_bool_b),
    .bool(M_bool_bool)
  );
  
  wire [1-1:0] M_comp_comp;
  reg [6-1:0] M_comp_alufn;
  reg [1-1:0] M_comp_z;
  reg [1-1:0] M_comp_v;
  reg [1-1:0] M_comp_n;
  compare_7 comp (
    .alufn(M_comp_alufn),
    .z(M_comp_z),
    .v(M_comp_v),
    .n(M_comp_n),
    .comp(M_comp_comp)
  );
  
  wire [16-1:0] M_shif_shif;
  reg [6-1:0] M_shif_alufn;
  reg [16-1:0] M_shif_a;
  reg [16-1:0] M_shif_b;
  shift_8 shif (
    .alufn(M_shif_alufn),
    .a(M_shif_a),
    .b(M_shif_b),
    .shif(M_shif_shif)
  );
  
  always @* begin
    M_add_a = a;
    M_add_b = b;
    M_add_alufn = alufn;
    M_bool_a = a;
    M_bool_b = b;
    M_bool_alufn = alufn;
    M_comp_z = M_add_z;
    M_comp_v = M_add_z;
    M_comp_n = M_add_n;
    M_comp_alufn = alufn;
    M_shif_a = a;
    M_shif_b = b;
    M_shif_alufn = alufn;
    
    case (alufn[4+1-:2])
      2'h0: begin
        out = M_add_s;
      end
      2'h1: begin
        out = M_bool_bool;
      end
      2'h2: begin
        out = M_shif_shif;
      end
      2'h3: begin
        out = M_comp_comp;
      end
      default: begin
        out = 1'h0;
      end
    endcase
    z = M_add_z;
    v = M_add_v;
    n = M_add_n;
  end
endmodule
